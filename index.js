require('dotenv').config();
const express = require('express');
const { 
  Client, GatewayIntentBits, Events, InteractionType,
  EmbedBuilder, ModalBuilder, TextInputBuilder, 
  TextInputStyle, ActionRowBuilder, StringSelectMenuBuilder, ButtonBuilder, ButtonStyle 
} = require('discord.js');

const app = express();
app.get('/', (_, res) => res.send('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'));
app.listen(3000, () => console.log('üåê Express-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000'));

const client = new Client({ intents: [GatewayIntentBits.Guilds] });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const INVITE_CHANNEL_ID = '1387148896320487564';
const CHANNEL_LOG_TIER_ID = '1349389519287357470';
const LEADER_ROLE_ID = '1200040982746517595';
const DEPUTY_ROLE_ID = '1200045928460058768';
const HIGH_ROLE_ID = '1200046656666730527';

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è Tier
const tierApplications = new Map();

// –û—Ç–ø—Ä–∞–≤–∫–∞ SELECT –º–µ–Ω—é
client.once(Events.ClientReady, async () => {
  const channel = await client.channels.fetch(INVITE_CHANNEL_ID);
  if (!channel) return console.error('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');

  const menu = new StringSelectMenuBuilder()
    .setCustomId('application_selector')
    .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏')
    .addOptions([
      { label: 'Main', value: 'main', emoji: 'üìù' },
      { label: 'Tier', value: 'tier', emoji: 'üß©' },
    ]);

  const row = new ActionRowBuilder().addComponents(menu);
  await channel.send({ content: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:', components: [row] });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
client.on(Events.InteractionCreate, async (interaction) => {
  // Select menu
  if (interaction.isStringSelectMenu() && interaction.customId === 'application_selector') {
    const selected = interaction.values[0];

    if (selected === 'main') {
      const modal = new ModalBuilder()
        .setCustomId('main_application')
        .setTitle('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ MAIN');

      const fields = [
        { id: 'full_name', label: '–ù–∏–∫ | –°—Ç–∞—Ç–∏–∫ | –í–æ–∑—Ä–∞—Å—Ç' },
        { id: 'timezone', label: '–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å | –ü—Ä–∞–π–º-—Ç–∞–π–º' },
        { id: 'gta_hours', label: '–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å —á–∞—Å–æ–≤ –≤ GTA V?' },
        { id: 'tournaments', label: '–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö?' },
        { id: 'saiga', label: '–û—Ç–∫–∞—Ç —Å—Ç—Ä–µ–ª—å–±—ã (–°–∞–π–≥–∞)' }
      ];

      const rows = fields.map(field =>
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId(field.id)
            .setLabel(field.label)
            .setStyle(TextInputStyle.Short)
            .setRequired(true)
        )
      );

      modal.addComponents(...rows);
      return interaction.showModal(modal);
    }

    if (selected === 'tier') {
      const modal = new ModalBuilder()
        .setCustomId('tier_step1')
        .setTitle('Tier –ó–∞—è–≤–∫–∞ ‚Äî –®–∞–≥ 1');

      const step1Fields = [
        { id: 'tier_name', label: '–ù–∏–∫ | –°—Ç–∞—Ç–∏–∫ | –í–æ–∑—Ä–∞—Å—Ç' },
        { id: 'past_families', label: '–í –∫–∞–∫–∏—Ö —Å–µ–º—å—è—Ö —Å–æ—Å—Ç–æ—è–ª–∏?', style: TextInputStyle.Paragraph },
{ id: 'why_us', label: '–ü–æ—á–µ–º—É –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å?', style: TextInputStyle.Paragraph }
      ];

      const rows = step1Fields.map(field =>
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId(field.id)
            .setLabel(field.label)
            .setStyle(TextInputStyle.Short)
            .setRequired(true)
        )
      );

      modal.addComponents(...rows);
      return interaction.showModal(modal);
    }
  }

  // MAIN –∑–∞—è–≤–∫–∞
  if (interaction.type === InteractionType.ModalSubmit && interaction.customId === 'main_application') {
    const get = (id) => interaction.fields.getTextInputValue(id);
    const embed = new EmbedBuilder()
      .setTitle('**–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ MAIN**')
      .setColor(0x5865f2)
      .setDescription(
        `**–ù–∏–∫ | –°—Ç–∞—Ç–∏–∫ | –í–æ–∑—Ä–∞—Å—Ç**\n${get('full_name')}\n\n` +
        `**–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å | –ü—Ä–∞–π–º-—Ç–∞–π–º**\n${get('timezone')}\n\n` +
        `**–ß–∞—Å—ã –≤ GTA V**\n${get('gta_hours')}\n\n` +
        `**–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º**\n${get('tournaments')}\n\n` +
        `**–û—Ç–∫–∞—Ç —Å—Ç—Ä–µ–ª—å–±—ã (–°–∞–π–≥–∞)**\n${get('saiga')}\n\n` +
        `**–í–∞—à Discord**\n<@${interaction.user.id}>\n\n` +
        `**ID Discord**\n${interaction.user.id}`
      );

    const logChannel = interaction.guild.channels.cache.get(CHANNEL_LOG_TIER_ID);
    const mentions = `<@&${LEADER_ROLE_ID}> <@&${DEPUTY_ROLE_ID}> <@&${HIGH_ROLE_ID}>`;
    if (logChannel) {
      await logChannel.send({ content: `${mentions} **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ MAIN**`, embeds: [embed] });
    }

    return interaction.reply({ content: '‚úÖ –ó–∞—è–≤–∫–∞ –≤ MAIN –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', ephemeral: true });
  }

  // Tier –®–∞–≥ 1
  if (interaction.type === InteractionType.ModalSubmit && interaction.customId === 'tier_step1') {
    const userId = interaction.user.id;
    tierApplications.set(userId, {
      tier_name: interaction.fields.getTextInputValue('tier_name'),
      tier_timezone: interaction.fields.getTextInputValue('tier_timezone'),
      tier_families: interaction.fields.getTextInputValue('tier_families'),
    });

    const modal2 = new ModalBuilder()
      .setCustomId('tier_step2')
      .setTitle('Tier –ó–∞—è–≤–∫–∞ ‚Äî –®–∞–≥ 2');

    const step2Fields = [
      { id: 'tier_rules', label: '–ó–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª (1‚Äì10)' },
      { id: 'tier_micro', label: '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∏ —Ä–µ—á—å (1‚Äì10)' },
      { id: 'tier_behavior', label: '–†–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (1‚Äì10)' },
      { id: 'tier_shooting', label: '–°—Ç—Ä–µ–ª—å–±–∞ (1‚Äì10)' },
      { id: 'tier_comment', label: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π / –°–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–∞–º' }
    ];

    const rows = step2Fields.map(field =>
      new ActionRowBuilder().addComponents(
        new TextInputBuilder()
          .setCustomId(field.id)
          .setLabel(field.label)
          .setStyle(TextInputStyle.Short)
          .setRequired(true)
      )
    );

    modal2.addComponents(...rows);
    return interaction.showModal(modal2);
  }

  // Tier –®–∞–≥ 2 ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞
  if (interaction.type === InteractionType.ModalSubmit && interaction.customId === 'tier_step2') {
    const userId = interaction.user.id;
    const saved = tierApplications.get(userId);
    if (!saved) {
      return interaction.reply({ content: '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.', ephemeral: true });
    }

    const get = (id) => interaction.fields.getTextInputValue(id);
    const embed = new EmbedBuilder()
      .setTitle('**–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ TIER**')
      .setColor(0xf59e42)
      .setDescription(
        `**–ù–∏–∫ | –°—Ç–∞—Ç–∏–∫ | –í–æ–∑—Ä–∞—Å—Ç**\n${saved.tier_name}\n\n` +
        `**–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å | –ü—Ä–∞–π–º-—Ç–∞–π–º**\n${saved.tier_timezone}\n\n` +
        `**–°–µ–º—å–∏ –∏ –ø—Ä–∏—á–∏–Ω–∞**\n${saved.tier_families}\n\n` +
        `**–ó–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª:** ${get('tier_rules')}\n` +
        `**–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∏ —Ä–µ—á—å:** ${get('tier_micro')}\n` +
        `**–†–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${get('tier_behavior')}\n` +
        `**–°—Ç—Ä–µ–ª—å–±–∞:** ${get('tier_shooting')}\n\n` +
        `**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**\n${get('tier_comment')}\n\n` +
        `**–í–∞—à Discord:** <@${userId}>\n` +
        `**ID Discord:** ${userId}`
      );

    const logChannel = interaction.guild.channels.cache.get(CHANNEL_LOG_TIER_ID);
    const mentions = `<@&${LEADER_ROLE_ID}> <@&${DEPUTY_ROLE_ID}> <@&${HIGH_ROLE_ID}>`;

    if (logChannel) {
      await logChannel.send({ content: `${mentions} **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ TIER**`, embeds: [embed] });
    }

    tierApplications.delete(userId);
    return interaction.reply({ content: '‚úÖ –ó–∞—è–≤–∫–∞ –≤ TIER –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', ephemeral: true });
  }
});

client.login(process.env.TOKEN);
