require('dotenv').config();
const express = require('express');
const app = express();
app.get('/', (_, res) => res.send('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'));
app.listen(3000, () => console.log('üåê Express-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000'));

const {
  Client,
  GatewayIntentBits,
  EmbedBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ActionRowBuilder,
  StringSelectMenuBuilder,
  Events,
  InteractionType,
} = require('discord.js');

const dayjs = require('dayjs');
const relativeTime = require('dayjs/plugin/relativeTime');
dayjs.extend(relativeTime);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const INVITE_CHANNEL_ID = '1387148896320487564';
const LEADER_ROLE_ID = '1200040982746517595';
const DEPUTY_ROLE_ID = '1200045928460058768';
const HIGH_ROLE_ID = '1200046656666730527';
const CHANNEL_LOG_MAIN_ID = '1300952587930959942';

const client = new Client({ intents: [GatewayIntentBits.Guilds] });

// –û—Ç–ø—Ä–∞–≤–∫–∞ SELECT –º–µ–Ω—é
client.once(Events.ClientReady, async () => {
  console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);

  const channel = await client.channels.fetch(INVITE_CHANNEL_ID);
  if (!channel) return console.error('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
  const menu = new StringSelectMenuBuilder()
  .setCustomId('application_selector')
  .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏')
  .addOptions([
    { label: 'Main', value: 'main', emoji: 'üìù' }
  ]);

const row = new ActionRowBuilder().addComponents(menu);

await channel.send({
  content: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:',
  components: [row]
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∏ —Ñ–æ—Ä–º—ã
client.on(Events.InteractionCreate, async (interaction) => {
  if (interaction.isStringSelectMenu()) {
    if (interaction.customId === 'application_selector') {
      const selected = interaction.values[0];

      if (selected === 'main') {
        const modal = new ModalBuilder()
          .setCustomId('main_application')
          .setTitle('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ MAIN');

        const inputs = [
  { id: 'full_name', label: '–ù–∏–∫ | –°—Ç–∞—Ç–∏–∫ | –í–æ–∑—Ä–∞—Å—Ç', style: TextInputStyle.Short },
  { id: 'stat_id', label: '–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å | –ü—Ä–∞–π–º-—Ç–∞–π–º', style: TextInputStyle.Short },
  { id: 'prime_time', label: '–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å —á–∞—Å–æ–≤ –≤ GTA V?', style: TextInputStyle.Paragraph },
  { id: 'karaba_link', label: '–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö?', style: TextInputStyle.Short },
  { id: 'saiga_link', label: '–û—Ç–∫–∞—Ç —Å—Ç—Ä–µ–ª—å–±—ã', style: TextInputStyle.Short }
];

        const rows = inputs.map(input =>
          new ActionRowBuilder().addComponents(
            new TextInputBuilder()
              .setCustomId(input.id)
              .setLabel(input.label)
              .setStyle(input.style)
              .setRequired(true)
          )
        );

        modal.addComponents(...rows);
        await interaction.showModal(modal);
      }
    }
  }

  if (interaction.type === InteractionType.ModalSubmit && interaction.customId === 'main_application') {
  const get = (id) => interaction.fields.getTextInputValue(id);
const userTag = `<@${interaction.user.id}>`; // —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
const userId = interaction.user.id;

const embed = new EmbedBuilder()
  .setTitle('**–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ MAIN**')
  .setColor(0x5865f2)
  .setDescription(
    `**–ù–∏–∫ | –°—Ç–∞—Ç–∏–∫ | –í–æ–∑—Ä–∞—Å—Ç**\n${get('full_name')}\n\n` +
    `**–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å | –ü—Ä–∞–π–º-—Ç–∞–π–º**\n${get('stat_id')}\n\n` +
    `**–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å —á–∞—Å–æ–≤ –≤ GTA V?**\n${get('prime_time')}\n\n` +
    `**–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö?**\n${get('karaba_link')}\n\n` +
    `**–û—Ç–∫–∞—Ç —Å—Ç—Ä–µ–ª—å–±—ã**\n${get('saiga_link')}\n\n` +
    `**–í–∞—à Discord**\n${userTag}\n\n` +
    `**ID Discord**\n${userId}`
  );

  const logChannel = interaction.guild.channels.cache.get(CHANNEL_LOG_MAIN_ID);
  const leader = `<@&${LEADER_ROLE_ID}>`;
  const deputy = `<@&${DEPUTY_ROLE_ID}>`;
  const high = `<@&${HIGH_ROLE_ID}>`;

if (logChannel) {
  await logChannel.send({
    content: `${leader} ${deputy} ${high} **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ MAIN**`,
    embeds: [embed],
  });
}
  await interaction.reply({ content: '‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', ephemeral: true });
 }
});

client.login(process.env.TOKEN);
